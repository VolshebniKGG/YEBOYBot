


import os
import json
import time
import asyncio
import logging
import configparser

import discord
from discord.ext import commands

import yt_dlp as youtube_dl
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

logger = logging.getLogger("bot")

class Music(commands.Cog):
    """
    –ö–æ–≥ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ –∑ YouTube/Spotify, –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç—Ä–µ–∫—ñ–≤ —ñ –∑–∞–ø–∏—Å–æ–º —É —á–µ—Ä–≥—É.
    –ü—Ä–∞—Ü—é—î –∑ py-cord[voice].
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.queues = {}  # {guild_id: [ {title, url}, ... ]}
        self.data_path = "data/music"
        self.queue_path = "data/queues"
        self.cache_path = os.path.join(self.data_path, "cache.json")
        self.track_cache_path = os.path.join(self.data_path, "track_cache.json")
        self.unavailable_log_path = os.path.join(self.data_path, "unavailable_log.json")
        self.processed_tracks = []  # –õ–æ–≥–æ–≤–∞–Ω—ñ —Ç—Ä–µ–∫–∏ (—ñ—Å—Ç–æ—Ä—ñ—è 5 —Ç—Ä–µ–∫—ñ–≤)

        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –ø–∞–ø–∫–∏ —ñ—Å–Ω—É—é—Ç—å
        os.makedirs(self.data_path, exist_ok=True)
        os.makedirs(self.queue_path, exist_ok=True)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É
        self.cache = self._load_cache()

        # –®–ª—è—Ö–∏ –¥–æ ffmpeg —Ç–∞ ffprobe
        self.ffmpeg_path = r"E:\Discord Bot\Bot\bin\ffmpeg.exe"
        self.ffprobe_path = r"E:\Discord Bot\Bot\bin\ffprobe.exe"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ffmpeg
        if not os.path.isfile(self.ffmpeg_path):
            raise FileNotFoundError(f"FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {self.ffmpeg_path}")
        logger.info(f"FFmpeg –∑–Ω–∞–π–¥–µ–Ω–æ: {self.ffmpeg_path}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ffprobe
        if not os.path.isfile(self.ffprobe_path):
            raise FileNotFoundError(f"FFprobe –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {self.ffprobe_path}")
        logger.info(f"FFprobe –∑–Ω–∞–π–¥–µ–Ω–æ: {self.ffprobe_path}")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è yt-dlp —ñ–∑ –≤–∫–∞–∑–∞–Ω–∏–º —à–ª—è—Ö–æ–º –¥–æ ffmpeg
        self.ytdl = youtube_dl.YoutubeDL({
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
            "quiet": True,
            "default_search": "auto",
            "noplaylist": False,
            "extract_flat": False,
            "ignoreerrors": True,
            "nocheckcertificate": True,
            "geo_bypass": True,
            "extractor_retries": 3,
            "ffmpeg_location": self.ffmpeg_path,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à —à–ª—è—Ö
        })

        # –Ø–∫—â–æ —Ñ–∞–π–ª—É –∫–µ—à—É –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ –ø—É—Å—Ç–∏–π
        if not os.path.exists(self.cache_path):
            with open(self.cache_path, "w", encoding="utf-8") as f:
                json.dump({}, f)

        # –ó—á–∏—Ç—É—î–º–æ Spotify-–∫—Ä–µ–¥–µ–Ω—à–ª–∏ –∑ config/options.ini
        config = configparser.ConfigParser()
        config.read("config/options.ini")
        client_id = config.get("Spotify", "Client_ID", fallback=None)
        client_secret = config.get("Spotify", "Client_Secret", fallback=None)
        if not client_id or not client_secret:
            raise ValueError("Spotify Client_ID —ñ Client_Secret –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω—ñ —É config/options.ini")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Spotify API
        self.spotify = spotipy.Spotify(
            auth_manager=SpotifyClientCredentials(
                client_id=client_id,
                client_secret=client_secret
            )
        )

    def _load_cache(self) -> dict:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î JSON-–∫–µ—à —Ç—Ä–µ–∫—ñ–≤ —ñ–∑ track_cache_path."""
        try:
            with open(self.track_cache_path, "r", encoding="utf-8") as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            logger.warning("Cache file not found or corrupted. Using empty cache.")
            return {}

    def _save_cache(self) -> None:
        """–ó–±–µ—Ä—ñ–≥–∞—î JSON-–∫–µ—à —Ç—Ä–µ–∫—ñ–≤ –¥–æ track_cache_path."""
        try:
            with open(self.track_cache_path, "w", encoding="utf-8") as file:
                json.dump(self.cache, file, indent=4)
        except Exception as e:
            logger.error(f"Error saving track cache: {e}")

    def _queue_file(self, guild_id: int) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —á–µ—Ä–≥–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."""
        return os.path.join(self.queue_path, f"{guild_id}_queue.json")

    def _load_queue(self, guild_id: int) -> list:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —á–µ—Ä–≥—É —Å–µ—Ä–≤–µ—Ä—É –∑ —Ñ–∞–π–ª—É. –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î [].
        """
        path = self._queue_file(guild_id)
        if os.path.exists(path):
            try:
                with open(path, "r", encoding="utf-8") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                logger.warning(f"Queue file {path} is corrupted. Using empty queue.")
                return []
        return []

    def _save_queue(self, guild_id: int, queue: list) -> None:
        """–ó–±–µ—Ä—ñ–≥–∞—î —á–µ—Ä–≥—É (list) –¥–æ JSON-—Ñ–∞–π–ª—É guild_id."""
        path = self._queue_file(guild_id)
        os.makedirs(os.path.dirname(path), exist_ok=True)
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(queue, f, indent=4)
        except Exception as e:
            logger.error(f"Error saving queue for guild {guild_id}: {e}")

    @commands.command(help="–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–∫ –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —É —á–µ—Ä–≥—É —Ç–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏.")
    async def play(self, ctx: commands.Context, *, query: str):
        guild_id = ctx.guild.id

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
        if not ctx.author.voice or not ctx.author.voice.channel:
            await ctx.send("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É.")
            return

        if not ctx.voice_client:
            await ctx.author.voice.channel.connect()
        elif ctx.voice_client.channel != ctx.author.voice.channel:
            await ctx.voice_client.move_to(ctx.author.voice.channel)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —á–µ—Ä–≥—É, —è–∫—â–æ –≤–æ–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—è
        if guild_id not in self.queues:
            self.queues[guild_id] = self._load_queue(guild_id)

        try:
            if "spotify.com" in query:
                await self._handle_spotify(ctx, query, guild_id)
            else:
                await self._handle_youtube(ctx, query, guild_id)

            # –ó–±–µ—Ä–µ–∂–µ–º–æ —á–µ—Ä–≥—É
            self._save_queue(guild_id, self.queues[guild_id])

            # –Ø–∫—â–æ –Ω–µ –≥—Ä–∞—î ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–µ–∫
            if not ctx.voice_client.is_playing():
                await self._play_next(ctx)
        except Exception as e:
            logger.error(f"Error in play command with query '{query}': {e}", exc_info=True)
            await ctx.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {e}")

    @commands.command(help="–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–ª–∏–π –ø–ª–µ–π–ª–∏—Å—Ç (Spotify/YouTube).")
    async def play_playlist(self, ctx: commands.Context, *, url: str):
        guild_id = ctx.guild.id

        if not ctx.author.voice or not ctx.author.voice.channel:
            await ctx.send("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É.")
            return

        if not ctx.voice_client:
            await ctx.author.voice.channel.connect()
        elif ctx.voice_client.channel != ctx.author.voice.channel:
            await ctx.voice_client.move_to(ctx.author.voice.channel)

        if guild_id not in self.queues:
            self.queues[guild_id] = self._load_queue(guild_id)

        try:
            if "spotify.com" in url:
                await self._handle_spotify(ctx, url, guild_id)
            else:
                await self._handle_youtube(ctx, url, guild_id)

            if not ctx.voice_client.is_playing():
                await self._play_next(ctx)
        except Exception as e:
            logger.error(f"Error in play_playlist with url '{url}': {e}", exc_info=True)
            await ctx.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")

    async def _handle_spotify(self, ctx: commands.Context, query: str, guild_id: int):
        """
        –û–±—Ä–æ–±–∫–∞ Spotify URL (–ø–ª–µ–π–ª–∏—Å—Ç —á–∏ –æ–∫—Ä–µ–º–∏–π —Ç—Ä–µ–∫), –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É —á–µ—Ä–≥—É.
        """
        logger.debug(f"_handle_spotify called with query: {query}")
        try:
            if "playlist" in query:
                results = self.spotify.playlist_tracks(query)
                items = results.get("items", [])
                for item in items:
                    track_obj = item.get("track")
                    if track_obj:
                        processed = await self._process_spotify_track(track_obj)
                        if processed:
                            self.queues[guild_id].append(processed)
                await ctx.send("üéµ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —Ç—Ä–µ–∫–∏ –∑—ñ Spotify-–ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ —á–µ—Ä–≥—É.")
            else:
                track_obj = self.spotify.track(query)
                processed_track = await self._process_spotify_track(track_obj)
                if processed_track:
                    self.queues[guild_id].append(processed_track)
                    await ctx.send(f"üéµ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–∫ –∑—ñ Spotify: **{processed_track['title']}**")
        except Exception as e:
            logger.error(f"Error processing Spotify link '{query}': {e}", exc_info=True)
            await ctx.send(f"‚ùå Spotify error: {e}")

    async def _process_spotify_track(self, track_obj: dict) -> dict | None:
        """
        –û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ–≥–æ Spotify-—Ç—Ä–µ–∫—É:
        - –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É (track_name + artist).
        - –®—É–∫–∞—î–º–æ —á–µ—Ä–µ–∑ yt-dlp (ytsearch).
        - –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ cache.
        """
        try:
            title_search = f"{track_obj['name']} - {track_obj['artists'][0]['name']}"
            if title_search in self.cache:
                logger.info(f"–¢—Ä–µ–∫ –≤–∂–µ –≤ –∫–µ—à—ñ: {title_search}")
                return self.cache[title_search]

            info = self.ytdl.extract_info(f"ytsearch:{title_search}", download=False)
            if info and "entries" in info and info["entries"]:
                best_entry = info["entries"][0]
                track_data = {
                    "title": best_entry.get("title", "Unknown"),
                    "url": best_entry.get("webpage_url", "")
                }
                self.cache[title_search] = track_data
                self._save_cache()
                return track_data
            else:
                logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è Spotify-—Ç—Ä–µ–∫—É: {title_search}")
                return None
        except Exception as e:
            logger.warning(f"Spotify-—Ç—Ä–µ–∫ '{track_obj.get('name','Unknown')}' –æ–±—Ä–æ–±–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}")
            return None

    async def _handle_youtube(self, ctx: commands.Context, query: str, guild_id: int):
        """
        –û–±—Ä–æ–±–∫–∞ YouTube –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–∏ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É.
        –ú–æ–∂–µ –±—É—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç —á–∏ –æ–∫—Ä–µ–º–µ –≤—ñ–¥–µ–æ.
        """
        logger.debug(f"_handle_youtube called with query: {query}")
        try:
            info = self.ytdl.extract_info(query, download=False)
            if info and "entries" in info and info["entries"]:
                entries = info["entries"]
                added_count = 0
                skipped_count = 0

                for e in entries:
                    # –Ø–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    if e.get("availability") != "public":
                        skipped_count += 1
                        continue
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ webpage_url, —è–∫—â–æ –≤—ñ–Ω —î, —ñ–Ω–∞–∫—à–µ fallback –¥–æ url
                    track_url = e.get("webpage_url", e.get("url"))
                    track_data = {
                        "title": e.get("title", "Unknown"),
                        "url": track_url
                    }
                    if e.get("is_live"):
                        track_data["title"] += " [Live Stream]"
                    self.queues[guild_id].append(track_data)
                    added_count += 1

                await ctx.send(f"üéµ –î–æ–¥–∞–Ω–æ {added_count} —Ç—Ä–µ–∫(—ñ–≤). –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}.")
            else:
                # –û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫—É
                if info is None:
                    await ctx.send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏/–≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç.")
                    return

                if info.get("availability") != "public":
                    await ctx.send("‚ùå –¶–µ –≤—ñ–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–µ.")
                    return

                title = info.get("title", "Unknown")
                # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ webpage_url
                url = info.get("webpage_url") or info.get("url", "")
                track_data = {"title": title, "url": url}
                self.queues[guild_id].append(track_data)
                await ctx.send(f"üéµ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–∫: **{title}**")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ YouTube-–∑–∞–ø–∏—Ç—É '{query}': {e}", exc_info=True)
            await ctx.send(f"‚ùå YouTube error: {e}")

    async def _play_next(self, ctx: commands.Context):
        """
        –ü—Ä–æ–≥—Ä–∞—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–µ–∫. –Ø–∫—â–æ —á–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è—î –ø—Ä–æ —Ü–µ.
        """
        guild_id = ctx.guild.id
        queue_ = self.queues.get(guild_id, [])
        if not queue_:
            logger.debug(f"–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è –¥–ª—è guild_id={guild_id}.")
            await ctx.send("‚úÖ Queue is empty! Add more tracks to play.")
            return

        track = queue_.pop(0)
        self._save_queue(guild_id, queue_)
        title = track.get("title", "Unknown")
        url = track.get("url", "")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ voice_client
        if not ctx.voice_client:
            logger.debug("voice_client is None, –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ–≥—Ä–∞—Ç–∏ —Ç—Ä–µ–∫.")
            if ctx.author.voice and ctx.author.voice.channel:
                await ctx.author.voice.channel.connect()
            else:
                await ctx.send("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.")
                return

        ffmpeg_options = "-vn"  # –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—ñ–¥–µ–æ
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ youtube-dl –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ URL –∞—É–¥—ñ–æ–ø–æ—Ç–æ–∫—É
            data = self.ytdl.extract_info(url, download=False)
            stream_url = data.get("url")
            # –Ø–∫—â–æ —Ü–µ live stream ‚Äì –¥–æ–¥–∞—î–º–æ reconnect –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            if data.get("is_live"):
                before_options = "-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5"
            else:
                before_options = ""
            source = discord.FFmpegPCMAudio(
                stream_url,
                executable=self.ffmpeg_path,
                before_options=before_options,
                options=ffmpeg_options
            )
        except Exception as e:
            logger.error(f"Error creating FFmpegPCMAudio –¥–ª—è —Ç—Ä–µ–∫—É {title}: {e}", exc_info=True)
            await ctx.send(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥—ñ–æ-–¥–∂–µ—Ä–µ–ª–æ –¥–ª—è: {title}")
            # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–∫—É
            await self._play_next(ctx)
            return

        def after_playing(error):
            if error:
                logger.error(f"Error after playing track '{title}': {error}", exc_info=True)
            else:
                logger.debug(f"–¢—Ä–µ–∫ '{title}' –≤—ñ–¥—Ç–≤–æ—Ä–∏–≤—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫.")
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–µ–∫ —É –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ
            asyncio.run_coroutine_threadsafe(self._play_next(ctx), self.bot.loop)

        try:
            ctx.voice_client.play(source, after=after_playing)
            await ctx.send(f"üé∂ Now playing: **{title}**")
        except Exception as e:
            logger.error(f"Error playing track '{title}': {e}", exc_info=True)
            await ctx.send(f"‚ùå Error playing track: {title}. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ...")
            await self._play_next(ctx)


    @commands.command(help="–ó—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É.")
    async def stop(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        if ctx.voice_client:
            self.queues[guild_id] = []
            self._save_queue(guild_id, [])
            ctx.voice_client.stop()
            await ctx.send("‚èπÔ∏è Playback stopped and queue cleared.")
        else:
            await ctx.send("‚ùå The bot is not in a voice channel!")

    @commands.command(help="–ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
    async def pause(self, ctx: commands.Context):
        if ctx.voice_client and ctx.voice_client.is_playing():
            ctx.voice_client.pause()
            await ctx.send("‚è∏Ô∏è Playback paused.")
        else:
            await ctx.send("‚ùå Nothing to pause!")

    @commands.command(help="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
    async def resume(self, ctx: commands.Context):
        if ctx.voice_client and ctx.voice_client.is_paused():
            ctx.voice_client.resume()
            await ctx.send("‚ñ∂Ô∏è Playback resumed.")
        else:
            await ctx.send("‚ùå Nothing to resume!")

    @commands.command(help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫.")
    async def skip(self, ctx: commands.Context):
        if ctx.voice_client and ctx.voice_client.is_playing():
            ctx.voice_client.stop()
            await ctx.send("‚è≠Ô∏è Track skipped.")
        else:
            await ctx.send("‚ùå Nothing to skip!")

    @commands.command(help="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Ç—Ä–µ–∫—ñ–≤ —É —á–µ—Ä–∑—ñ.")
    async def queue(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        current_queue = self.queues.get(guild_id, [])
        if current_queue:
            displayed = current_queue[:10]
            lines = ["üìú **Track Queue:**"]
            for i, trk in enumerate(displayed, start=1):
                lines.append(f"{i}. {trk['title']}")
            if len(current_queue) > 10:
                lines.append(f"...and {len(current_queue) - 10} more tracks.")
            await ctx.send("\n".join(lines))
        else:
            await ctx.send("‚ùå The queue is empty.")

def setup(bot: commands.Bot):
    """
    –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Music Cog –¥–æ –±–æ—Ç–∞ (py-cord).
    –û—Å–∫—ñ–ª—å–∫–∏ add_cog —î —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º, –º–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ await.
    """
    try:
        bot.add_cog(Music(bot))
        logger.info("Music Cog successfully loaded.")
    except Exception as e:
        logger.error(f"Failed to load Music Cog: {e}", exc_info=True)
        raise








