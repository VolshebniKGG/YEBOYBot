


import os
import json
import asyncio
import logging
import configparser
import random
import subprocess

import discord
from discord.ext import commands

import yt_dlp as youtube_dl
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

logger = logging.getLogger("bot")

# –°–∫—ñ–ª—å–∫–∏ —Ç—Ä–µ–∫—ñ–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
CHUNK_SIZE = 25
# –ó–∞—Ç—Ä–∏–º–∫–∞ (—Å–µ–∫—É–Ω–¥–∏) –º—ñ–∂ —á–∞–Ω–∫–∞–º–∏, —â–æ–± –Ω–µ ¬´—Ñ—Ä–∏–∑–∏—Ç–∏¬ª –±–æ—Ç–∞
CHUNK_DELAY = 0.1

# =================================================================
# –ö–ª–∞—Å –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —á–µ—Ä–≥–∏ —Ç—Ä–µ–∫—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ (discord.ui.View)
# =================================================================
class QueueView(discord.ui.View):
    def __init__(self, ctx: commands.Context, queue: list, items_per_page: int = 10):
        super().__init__(timeout=60)  # View –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–æ—é 60 —Å–µ–∫—É–Ω–¥
        self.ctx = ctx
        self.queue = queue
        self.items_per_page = items_per_page
        self.current_page = 0

    def get_page_count(self) -> int:
        return (len(self.queue) - 1) // self.items_per_page + 1

    def get_embed(self) -> discord.Embed:
        embed = discord.Embed(title="üìú –ß–µ—Ä–≥–∞ —Ç—Ä–µ–∫—ñ–≤")
        start = self.current_page * self.items_per_page
        end = start + self.items_per_page
        page_items = self.queue[start:end]
        if page_items:
            description = "\n".join(f"{start + i + 1}. {track['title']}" for i, track in enumerate(page_items))
            embed.description = description
        else:
            embed.description = "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è."
        embed.set_footer(text=f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{self.get_page_count()}")
        return embed

    @discord.ui.button(label="‚è™", style=discord.ButtonStyle.primary, custom_id="first_page")
    async def first_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        self.current_page = 0
        await interaction.response.edit_message(embed=self.get_embed(), view=self)

    @discord.ui.button(label="‚óÄ", style=discord.ButtonStyle.primary, custom_id="previous_page")
    async def previous_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        if self.current_page > 0:
            self.current_page -= 1
        await interaction.response.edit_message(embed=self.get_embed(), view=self)

    @discord.ui.button(label="‚ñ∂", style=discord.ButtonStyle.primary, custom_id="next_page")
    async def next_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        if self.current_page < self.get_page_count() - 1:
            self.current_page += 1
        await interaction.response.edit_message(embed=self.get_embed(), view=self)

    @discord.ui.button(label="‚è©", style=discord.ButtonStyle.primary, custom_id="last_page")
    async def last_page(self, button: discord.ui.Button, interaction: discord.Interaction):
        self.current_page = self.get_page_count() - 1
        await interaction.response.edit_message(embed=self.get_embed(), view=self)

# =================================================================
# Music Cog
# =================================================================
class Music(commands.Cog):
    """
    –ö–æ–≥ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ –∑ YouTube/Spotify —ñ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º,
    –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç—Ä–µ–∫—ñ–≤, –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º —á–µ—Ä–≥–æ—é, —Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è–º –≥—É—á–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–≤—Ç–æ–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º.
    –ü—Ä–∞—Ü—é—î –∑ py-cord[voice] —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ffmpeg.exe —Ç–∞ ffprobe.exe.
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot

        # –£—Å—ñ —á–µ—Ä–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –ø–∞–º'—è—Ç—ñ: {guild_id: [ {title, url}, ... ]}
        self.queues = {}
        # –î–∞–Ω—ñ –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫, —â–æ –≥—Ä–∞—î: {guild_id: {title, duration}}
        self.current_tracks = {}

        # –®–ª—è—Ö, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∫–µ—à —ñ —á–µ—Ä–≥–∏
        self.data_path = "data/music"
        self.queue_path = "data/queues"
        self.cache_path = os.path.join(self.data_path, "cache.json")
        self.track_cache_path = os.path.join(self.data_path, "track_cache.json")
        self.unavailable_log_path = os.path.join(self.data_path, "unavailable_log.json")

        self.processed_tracks = []  # –õ–æ–≥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ç—Ä–µ–∫—ñ–≤
        self.default_volume = 0.5   # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≥—É—á–Ω—ñ—Å—Ç—å (50%)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–µ–∫
        os.makedirs(self.data_path, exist_ok=True)
        os.makedirs(self.queue_path, exist_ok=True)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É —Ç—Ä–µ–∫—ñ–≤
        self.cache = self._load_cache()

        # –®–ª—è—Ö–∏ –¥–æ ffmpeg —Ç–∞ ffprobe (–∑–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥ —Å–≤–æ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        self.ffmpeg_path = r"E:\Discord Bot\Bot\bin\ffmpeg.exe"
        self.ffprobe_path = r"E:\Discord Bot\Bot\bin\ffprobe.exe"

        if not os.path.isfile(self.ffmpeg_path):
            raise FileNotFoundError(f"FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {self.ffmpeg_path}")
        logger.info(f"FFmpeg –∑–Ω–∞–π–¥–µ–Ω–æ: {self.ffmpeg_path}")

        if not os.path.isfile(self.ffprobe_path):
            raise FileNotFoundError(f"FFprobe –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {self.ffprobe_path}")
        logger.info(f"FFprobe –∑–Ω–∞–π–¥–µ–Ω–æ: {self.ffprobe_path}")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è yt-dlp
        self.ytdl = youtube_dl.YoutubeDL({
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
            "quiet": True,
            "default_search": "auto",
            "noplaylist": False,
            "extract_flat": False,
            "ignoreerrors": True,
            "nocheckcertificate": True,
            "geo_bypass": True,
            "extractor_retries": 3,
            "ffmpeg_location": self.ffmpeg_path,
        })

        # –Ø–∫—â–æ —Ñ–∞–π–ª—É –∫–µ—à—É –Ω–µ–º–∞—î ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π
        if not os.path.exists(self.cache_path):
            with open(self.cache_path, "w", encoding="utf-8") as f:
                json.dump({}, f)

        # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è Spotify-–∫—Ä–µ–¥–µ–Ω—à–ª—ñ–≤ —ñ–∑ config/options.ini
        config = configparser.ConfigParser()
        config.read("config/options.ini")
        client_id = config.get("Spotify", "Client_ID", fallback=None)
        client_secret = config.get("Spotify", "Client_Secret", fallback=None)
        if not client_id or not client_secret:
            raise ValueError("Spotify Client_ID —ñ Client_Secret –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω—ñ —É config/options.ini")
        self.spotify = spotipy.Spotify(
            auth_manager=SpotifyClientCredentials(
                client_id=client_id,
                client_secret=client_secret
            )
        )

    # -----------------------------------------------------
    #  –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–µ—à–µ–º —ñ —á–µ—Ä–≥–æ—é
    # -----------------------------------------------------

    def _load_cache(self) -> dict:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON‚Äë–∫–µ—à—É —Ç—Ä–µ–∫—ñ–≤ —ñ–∑ track_cache_path."""
        try:
            with open(self.track_cache_path, "r", encoding="utf-8") as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            logger.warning("Cache file not found or corrupted. Using empty cache.")
            return {}

    def _save_cache(self) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON‚Äë–∫–µ—à—É —Ç—Ä–µ–∫—ñ–≤ –¥–æ track_cache_path."""
        try:
            with open(self.track_cache_path, "w", encoding="utf-8") as file:
                json.dump(self.cache, file, indent=4)
        except Exception as e:
            logger.error(f"Error saving track cache: {e}")

    def _queue_file(self, guild_id: int) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —á–µ—Ä–≥–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."""
        return os.path.join(self.queue_path, f"{guild_id}_queue.json")

    def _load_queue(self, guild_id: int) -> list:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∑ —Ñ–∞–π–ª—É. –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ [].
        """
        path = self._queue_file(guild_id)
        if os.path.exists(path):
            try:
                with open(path, "r", encoding="utf-8") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                logger.warning(f"Queue file {path} is corrupted. Using empty queue.")
                return []
        return []

    def _save_queue(self, guild_id: int, queue: list) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–≥–∏ (list) –¥–æ JSON‚Äë—Ñ–∞–π–ª—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞."""
        path = self._queue_file(guild_id)
        os.makedirs(os.path.dirname(path), exist_ok=True)
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(queue, f, indent=4)
        except Exception as e:
            logger.error(f"Error saving queue for guild {guild_id}: {e}")

    def ensure_queue(self, guild_id: int) -> list:
        """
        –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —á–µ—Ä–≥–∏ (list) –¥–ª—è –¥–∞–Ω–æ–≥–æ guild_id.
        –Ø–∫—â–æ –≤ –ø–∞–º'—è—Ç—ñ (self.queues[guild_id]) —á–µ—Ä–≥–∏ –Ω–µ–º–∞—î, –≤–æ–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –∑ —Ñ–∞–π–ª—É.
        """
        if guild_id not in self.queues:
            loaded = self._load_queue(guild_id)
            self.queues[guild_id] = loaded
        return self.queues[guild_id]

    # -----------------------------------------------------
    #   –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è Embed-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    # -----------------------------------------------------

    async def _send_embed_footer(self, ctx: commands.Context, text: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –¥–µ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å—Å—è —É footer Embed."""
        embed = discord.Embed()
        embed.set_footer(text=text)
        await ctx.send(embed=embed)

    # -----------------------------------------------------
    #  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞/–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
    # -----------------------------------------------------

    async def ensure_voice(self, ctx: commands.Context) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É.
        –ü—ñ–¥–∫–ª—é—á–∞—î –±–æ—Ç, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î.
        """
        if not ctx.author.voice or not ctx.author.voice.channel:
            await self._send_embed_footer(ctx, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É.")
            return False
        if not ctx.voice_client:
            await ctx.author.voice.channel.connect()
        elif ctx.voice_client.channel != ctx.author.voice.channel:
            await ctx.voice_client.move_to(ctx.author.voice.channel)
        return True

    # -----------------------------------------------------
    #              –ö–æ–º–∞–Ω–¥–∞  !play
    # -----------------------------------------------------

    @commands.command(help="–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–∫ –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —É —á–µ—Ä–≥—É —Ç–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ (YouTube / Spotify).")
    async def play(self, ctx: commands.Context, *, query: str):
        """–û–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—É–¥—å-—è–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —ñ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤."""
        if not await self.ensure_voice(ctx):
            return

        guild_id = ctx.guild.id
        # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ (–∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ) –ø–æ—Ç–æ—á–Ω—É —á–µ—Ä–≥—É
        queue_ = self.ensure_queue(guild_id)

        try:
            if "spotify.com" in query:
                await self._handle_spotify(ctx, query, guild_id)
            else:
                await self._handle_youtube(ctx, query, guild_id)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —á–µ—Ä–≥—É
            self._save_queue(guild_id, queue_)

            # –Ø–∫—â–æ –∑–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            if ctx.voice_client and not ctx.voice_client.is_playing():
                await self._play_next(ctx)
        except Exception as e:
            logger.error(f"Error in play command with query '{query}': {e}", exc_info=True)
            await self._send_embed_footer(ctx, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {e}")

    # -----------------------------------------------------
    #  –û–±—Ä–æ–±–∫–∞ Spotify
    # -----------------------------------------------------

    async def _handle_spotify(self, ctx: commands.Context, query: str, guild_id: int):
        logger.debug(f"_handle_spotify called with query: {query}")
        queue_ = self.ensure_queue(guild_id)

        try:
            if "playlist" in query:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ—Å—Ç—É–ø–æ–≤–æ
                offset = 0
                all_items = []
                while True:
                    results = self.spotify.playlist_items(query, offset=offset, additional_types=["track"])
                    items = results.get("items", [])
                    if not items:
                        break
                    all_items.extend(items)
                    offset += len(items)
                    if not results.get("next"):
                        break

                total = len(all_items)
                added = 0
                for i in range(0, total, CHUNK_SIZE):
                    chunk = all_items[i : i + CHUNK_SIZE]
                    for item in chunk:
                        track_obj = item.get("track")
                        if track_obj:
                            processed = await self._process_spotify_track(track_obj)
                            if processed:
                                queue_.append(processed)
                                added += 1

                    # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞
                    await asyncio.sleep(CHUNK_DELAY)

                await self._send_embed_footer(ctx, f"üéµ –î–æ–¥–∞–Ω–æ {added} —Ç—Ä–µ–∫(—ñ–≤) –∑—ñ Spotify-–ø–ª–µ–π–ª–∏—Å—Ç–∞.")
                self._save_queue(guild_id, queue_)
            else:
                # –û–¥–∏–Ω —Ç—Ä–µ–∫
                track_obj = self.spotify.track(query)
                processed_track = await self._process_spotify_track(track_obj)
                if processed_track:
                    queue_.append(processed_track)
                    self._save_queue(guild_id, queue_)
                    await self._send_embed_footer(ctx, f"üéµ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–∫ –∑—ñ Spotify: {processed_track['title']}")

        except Exception as e:
            logger.error(f"Error processing Spotify link '{query}': {e}", exc_info=True)
            await self._send_embed_footer(ctx, f"‚ùå Spotify error: {e}")

    async def _process_spotify_track(self, track_obj: dict) -> dict | None:
        try:
            title_search = f"{track_obj['name']} - {track_obj['artists'][0]['name']}"
            if title_search in self.cache:
                logger.info(f"–¢—Ä–µ–∫ –≤–∂–µ –≤ –∫–µ—à—ñ: {title_search}")
                return self.cache[title_search]

            info = await asyncio.to_thread(
                self.ytdl.extract_info, f"ytsearch:{title_search}", False
            )
            if info and "entries" in info and info["entries"]:
                best_entry = info["entries"][0]
                track_data = {
                    "title": best_entry.get("title", "Unknown"),
                    "url": best_entry.get("webpage_url", "")
                }
                self.cache[title_search] = track_data
                self._save_cache()
                return track_data
            else:
                logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è Spotify-—Ç—Ä–µ–∫—É: {title_search}")
                return None
        except Exception as e:
            logger.warning(f"Spotify-—Ç—Ä–µ–∫ '{track_obj.get('name','Unknown')}' –æ–±—Ä–æ–±–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}")
            return None

    # -----------------------------------------------------
    #  –û–±—Ä–æ–±–∫–∞ YouTube
    # -----------------------------------------------------

    async def _handle_youtube(self, ctx: commands.Context, query: str, guild_id: int):
        logger.debug(f"_handle_youtube called with query: {query}")
        queue_ = self.ensure_queue(guild_id)

        try:
            info = await asyncio.to_thread(self.ytdl.extract_info, query, download=False)

            # –Ø–∫—â–æ —Ü–µ –ø–ª–µ–π–ª–∏—Å—Ç
            if info and "entries" in info and info["entries"]:
                entries = info["entries"]
                total = len(entries)
                added_count = 0
                skipped_count = 0

                for i in range(0, total, CHUNK_SIZE):
                    chunk = entries[i : i + CHUNK_SIZE]
                    for e in chunk:
                        if e is None or e.get("availability") != "public":
                            skipped_count += 1
                            continue
                        track_url = e.get("webpage_url", e.get("url"))
                        track_data = {
                            "title": e.get("title", "Unknown"),
                            "url": track_url
                        }
                        if e.get("is_live"):
                            track_data["title"] += " [Live Stream]"
                        queue_.append(track_data)
                        added_count += 1

                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ—Ä—Ü—ñ—è–º–∏
                    await asyncio.sleep(CHUNK_DELAY)

                await self._send_embed_footer(
                    ctx,
                    f"üéµ –î–æ–¥–∞–Ω–æ {added_count} —Ç—Ä–µ–∫(—ñ–≤) –∑ YouTube-–ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}."
                )
                self._save_queue(guild_id, queue_)

            else:
                # –Ø–∫—â–æ –æ–¥–∏–Ω–∏—á–Ω–µ –≤—ñ–¥–µ–æ
                if not info:
                    await self._send_embed_footer(ctx, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏/–≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç.")
                    return
                if info.get("availability") != "public":
                    await self._send_embed_footer(ctx, "‚ùå –¶–µ –≤—ñ–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–µ.")
                    return

                title = info.get("title", "Unknown")
                url = info.get("webpage_url") or info.get("url", "")
                track_data = {"title": title, "url": url}
                queue_.append(track_data)
                self._save_queue(guild_id, queue_)
                await self._send_embed_footer(ctx, f"üéµ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–∫: {title}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ YouTube-–∑–∞–ø–∏—Ç—É '{query}': {e}", exc_info=True)
            await self._send_embed_footer(ctx, f"‚ùå YouTube error: {e}")

    # -----------------------------------------------------
    #  –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–∫—É
    # -----------------------------------------------------

    async def _play_next(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        queue_ = self.ensure_queue(guild_id)

        if not queue_:
            logger.debug(f"–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è –¥–ª—è guild_id={guild_id}.")
            await self._send_embed_footer(ctx, "‚úÖ –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è! –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —Ç—Ä–µ–∫—ñ–≤ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
            return

        track = queue_.pop(0)
        self._save_queue(guild_id, queue_)
        title = track.get("title", "Unknown")
        url = track.get("url", "")

        # –Ø–∫—â–æ –±–æ—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É ‚Äì –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è
        if not ctx.voice_client:
            logger.debug("voice_client is None, –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ–≥—Ä–∞—Ç–∏ —Ç—Ä–µ–∫.")
            if ctx.author.voice and ctx.author.voice.channel:
                await ctx.author.voice.channel.connect()
            else:
                await self._send_embed_footer(ctx, "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.")
                return

        ffmpeg_options = "-vn"
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–µ–∫—É (—Ü—è —á–∞—Å—Ç–∏–Ω–∞ –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è)
            data = await asyncio.to_thread(self.ytdl.extract_info, url, download=False)
            if not data:
                await self._send_embed_footer(ctx, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏: {title}")
                await self._play_next(ctx)
                return

            stream_url = data.get("url")
            # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            before_options = "-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5"

            source = discord.FFmpegPCMAudio(
                stream_url,
                executable=self.ffmpeg_path,
                before_options=before_options,
                options=ffmpeg_options
            )
            source = discord.PCMVolumeTransformer(source, volume=self.default_volume)
        except Exception as e:
            logger.error(f"Error creating FFmpegPCMAudio –¥–ª—è —Ç—Ä–µ–∫—É {title}: {e}", exc_info=True)
            await self._send_embed_footer(ctx, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥—ñ–æ-–¥–∂–µ—Ä–µ–ª–æ –¥–ª—è: {title}")
            await self._play_next(ctx)
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫ (—Ç—É—Ç data –∑–∞–≤–∂–¥–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∞)
        self.current_tracks[guild_id] = {"title": title, "duration": data.get("duration")}

        def after_playing(error):
            if error:
                logger.error(f"Error after playing track '{title}': {error}", exc_info=True)
            else:
                logger.debug(f"–¢—Ä–µ–∫ '{title}' –≤—ñ–¥—Ç–≤–æ—Ä–∏–≤—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫.")
            self.current_tracks[guild_id] = None
            asyncio.run_coroutine_threadsafe(self._play_next(ctx), self.bot.loop)

        try:
            ctx.voice_client.play(source, after=after_playing)
            await self._send_embed_footer(ctx, f"üé∂ –ó–∞—Ä–∞–∑ –≥—Ä–∞—î: {title}")
        except Exception as e:
            logger.error(f"Error playing track '{title}': {e}", exc_info=True)
            await self._send_embed_footer(ctx, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {title}. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ...")
            await self._play_next(ctx)

    # -----------------------------------------------------
    #             –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏ (stop, pause —Ç–æ—â–æ)
    # -----------------------------------------------------

    @commands.command(help="–ó—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É.")
    async def stop(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ —á–µ—Ä–≥—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ –±—É–ª–æ
        queue_ = self.ensure_queue(guild_id)

        if ctx.voice_client:
            queue_.clear()
            self._save_queue(guild_id, queue_)
            ctx.voice_client.stop()
            await self._send_embed_footer(ctx, "‚èπÔ∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ —Ç–∞ —á–µ—Ä–≥–∞ –æ—á–∏—â–µ–Ω–∞.")
        else:
            await self._send_embed_footer(ctx, "‚ùå –ë–æ—Ç –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ!")

    @commands.command(help="–ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
    async def pause(self, ctx: commands.Context):
        if ctx.voice_client and ctx.voice_client.is_playing():
            ctx.voice_client.pause()
            await self._send_embed_footer(ctx, "‚è∏Ô∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.")
        else:
            await self._send_embed_footer(ctx, "‚ùå –ù–µ–º–∞—î —â–æ —Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ –ø–∞—É–∑—É!")

    @commands.command(help="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
    async def resume(self, ctx: commands.Context):
        if ctx.voice_client and ctx.voice_client.is_paused():
            ctx.voice_client.resume()
            await self._send_embed_footer(ctx, "‚ñ∂Ô∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ.")
        else:
            await self._send_embed_footer(ctx, "‚ùå –ù–µ–º–∞—î —â–æ –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞—Ç–∏!")

    @commands.command(help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫.")
    async def skip(self, ctx: commands.Context):
        if ctx.voice_client and ctx.voice_client.is_playing():
            ctx.voice_client.stop()
            await self._send_embed_footer(ctx, "‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        else:
            await self._send_embed_footer(ctx, "‚ùå –ù–µ–º–∞—î —â–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏!")

    @commands.command(help="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Ç—Ä–µ–∫—ñ–≤ —É —á–µ—Ä–∑—ñ.")
    async def queue(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        queue_ = self.ensure_queue(guild_id)

        if not queue_:
            await self._send_embed_footer(ctx, "‚ùå –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.")
            return

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–≥–∏
        view = QueueView(ctx, queue_, items_per_page=10)
        embed = view.get_embed()
        await ctx.send(embed=embed, view=view)

    @commands.command(help="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—É—á–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è (0-100%).")
    async def volume(self, ctx: commands.Context, volume: int):
        if 0 <= volume <= 100:
            self.default_volume = volume / 100
            if ctx.voice_client and ctx.voice_client.source:
                if isinstance(ctx.voice_client.source, discord.PCMVolumeTransformer):
                    ctx.voice_client.source.volume = self.default_volume
            await self._send_embed_footer(ctx, f"üîä –ì—É—á–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {volume}%.")
        else:
            await self._send_embed_footer(ctx, "‚ùå –í–∫–∞–∂—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 100.")

    @commands.command(help="–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞—Ä–∞–∑ –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞–Ω–∏–π —Ç—Ä–µ–∫.")
    async def nowplaying(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        current = self.current_tracks.get(guild_id)
        if current:
            title = current.get("title", "Unknown")
            duration = current.get("duration")
            if duration:
                minutes = int(duration // 60)
                seconds = int(duration % 60)
                duration_str = f"{minutes}:{seconds:02d}"
                await self._send_embed_footer(ctx, f"üé∂ –ó–∞—Ä–∞–∑ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è: {title} [{duration_str}]")
            else:
                await self._send_embed_footer(ctx, f"üé∂ –ó–∞—Ä–∞–∑ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è: {title}")
        else:
            await self._send_embed_footer(ctx, "‚ùå –ù–∞—Ä–∞–∑—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è.")

    @commands.command(help="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–∫ –∑ —á–µ—Ä–≥–∏ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º.")
    async def remove(self, ctx: commands.Context, index: int):
        guild_id = ctx.guild.id
        queue_ = self.ensure_queue(guild_id)

        if index < 1 or index > len(queue_):
            await self._send_embed_footer(ctx, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫—É.")
        else:
            removed = queue_.pop(index - 1)
            self._save_queue(guild_id, queue_)
            await self._send_embed_footer(ctx, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Ç—Ä–µ–∫: {removed.get('title', 'Unknown')}")

    @commands.command(help="–ü–µ—Ä–µ–º—ñ—à–∞—Ç–∏ —á–µ—Ä–≥—É.")
    async def shuffle(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        queue_ = self.ensure_queue(guild_id)

        if not queue_:
            await self._send_embed_footer(ctx, "‚ùå –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.")
        else:
            random.shuffle(queue_)
            self._save_queue(guild_id, queue_)
            await self._send_embed_footer(ctx, "üîÄ –ß–µ—Ä–≥–∞ –ø–µ—Ä–µ–º—ñ—à–∞–Ω–∞.")

    @commands.command(help="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é —á–µ—Ä–≥—É, –Ω–µ –∑—É–ø–∏–Ω—è—é—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫.")
    async def clearqueue(self, ctx: commands.Context):
        guild_id = ctx.guild.id
        queue_ = self.ensure_queue(guild_id)

        if not queue_:
            await self._send_embed_footer(ctx, "‚ùå –ß–µ—Ä–≥–∞ —ñ —Ç–∞–∫ –ø–æ—Ä–æ–∂–Ω—è.")
        else:
            queue_.clear()
            self._save_queue(guild_id, queue_)
            await self._send_embed_footer(ctx, "üóëÔ∏è –í—Å—è —á–µ—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

# -----------------------------------------------------
#          –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞ (setup)
# -----------------------------------------------------

def setup(bot: commands.Bot):
    """
    –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Music Cog –¥–æ –±–æ—Ç–∞ (py-cord).
    add_cog —î —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º, —Ç–æ–º—É await –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.
    """
    try:
        bot.add_cog(Music(bot))
        logger.info("Music Cog successfully loaded.")
    except Exception as e:
        logger.error(f"Failed to load Music Cog: {e}", exc_info=True)
        raise













